// Mocks generated by Mockito 5.4.4 from annotations
// in cuy_flutter_dev/test/utils/test_util.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cuy_flutter_dev/core/error/failure.dart' as _i5;
import 'package:cuy_flutter_dev/domain/entities/auth_entity.dart' as _i6;
import 'package:cuy_flutter_dev/domain/entities/login_entity.dart' as _i8;
import 'package:cuy_flutter_dev/domain/entities/plans_entity.dart' as _i10;
import 'package:cuy_flutter_dev/domain/repository/auth_repository.dart' as _i3;
import 'package:cuy_flutter_dev/domain/repository/login_repository.dart' as _i7;
import 'package:cuy_flutter_dev/domain/repository/plans_repository.dart' as _i9;
import 'package:cuy_flutter_dev/domain/repository/token_repository.dart'
    as _i11;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>> auth({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #auth,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.AuthEntity>(
          this,
          Invocation.method(
            #auth,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.AuthEntity>>);
}

/// A class which mocks [LoginRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepository extends _i1.Mock implements _i7.LoginRepository {
  MockLoginRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.LoginEntity>> login({
    required String? authorization,
    required String? emailOrPhone,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #authorization: authorization,
            #emailOrPhone: emailOrPhone,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i8.LoginEntity>>.value(
            _FakeEither_0<_i5.Failure, _i8.LoginEntity>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #authorization: authorization,
              #emailOrPhone: emailOrPhone,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i8.LoginEntity>>);
}

/// A class which mocks [PlansRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlansRepository extends _i1.Mock implements _i9.PlansRepository {
  MockPlansRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i10.PlansEntity>> getActivePlans(
          {required String? authorization}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActivePlans,
          [],
          {#authorization: authorization},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i10.PlansEntity>>.value(
                _FakeEither_0<_i5.Failure, _i10.PlansEntity>(
          this,
          Invocation.method(
            #getActivePlans,
            [],
            {#authorization: authorization},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i10.PlansEntity>>);
}

/// A class which mocks [TokenRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenRepository extends _i1.Mock implements _i11.TokenRepository {
  MockTokenRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String?> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> saveToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #saveToken,
          [token],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
