// Mocks generated by Mockito 5.4.4 from annotations
// in cuy_flutter_dev/test/utils/test_util.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cuy_flutter_dev/core/error/failure.dart' as _i6;
import 'package:cuy_flutter_dev/data/data_sources/remote_data_source.dart'
    as _i18;
import 'package:cuy_flutter_dev/data/models/auth_model.dart' as _i19;
import 'package:cuy_flutter_dev/data/models/auth_request_model.dart' as _i20;
import 'package:cuy_flutter_dev/data/models/login_model.dart' as _i21;
import 'package:cuy_flutter_dev/data/models/login_request_model.dart' as _i22;
import 'package:cuy_flutter_dev/data/models/plans_model.dart' as _i23;
import 'package:cuy_flutter_dev/domain/entities/auth_entity.dart' as _i7;
import 'package:cuy_flutter_dev/domain/entities/login_entity.dart' as _i9;
import 'package:cuy_flutter_dev/domain/entities/plans_entity.dart' as _i11;
import 'package:cuy_flutter_dev/domain/repository/auth_repository.dart' as _i4;
import 'package:cuy_flutter_dev/domain/repository/login_repository.dart' as _i8;
import 'package:cuy_flutter_dev/domain/repository/plans_repository.dart'
    as _i10;
import 'package:cuy_flutter_dev/domain/repository/token_repository.dart'
    as _i12;
import 'package:cuy_flutter_dev/domain/usecases/get_active_plans_usecase.dart'
    as _i13;
import 'package:cuy_flutter_dev/domain/usecases/get_token_usecase.dart' as _i14;
import 'package:cuy_flutter_dev/domain/usecases/post_auth_usecase.dart' as _i15;
import 'package:cuy_flutter_dev/domain/usecases/post_login_usecase.dart'
    as _i17;
import 'package:cuy_flutter_dev/domain/usecases/save_token_usecase.dart'
    as _i16;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:retrofit/retrofit.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpResponse_1<T> extends _i1.SmartFake
    implements _i3.HttpResponse<T> {
  _FakeHttpResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i4.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.AuthEntity>> auth({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #auth,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i7.AuthEntity>>.value(
            _FakeEither_0<_i6.Failure, _i7.AuthEntity>(
          this,
          Invocation.method(
            #auth,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.AuthEntity>>);
}

/// A class which mocks [LoginRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepository extends _i1.Mock implements _i8.LoginRepository {
  MockLoginRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i9.LoginEntity>> login({
    required String? authorization,
    required String? emailOrPhone,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #authorization: authorization,
            #emailOrPhone: emailOrPhone,
            #password: password,
          },
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i9.LoginEntity>>.value(
            _FakeEither_0<_i6.Failure, _i9.LoginEntity>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #authorization: authorization,
              #emailOrPhone: emailOrPhone,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i9.LoginEntity>>);
}

/// A class which mocks [PlansRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlansRepository extends _i1.Mock implements _i10.PlansRepository {
  MockPlansRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i11.PlansEntity>> getActivePlans(
          {required String? authorization}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActivePlans,
          [],
          {#authorization: authorization},
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, _i11.PlansEntity>>.value(
                _FakeEither_0<_i6.Failure, _i11.PlansEntity>(
          this,
          Invocation.method(
            #getActivePlans,
            [],
            {#authorization: authorization},
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i11.PlansEntity>>);
}

/// A class which mocks [TokenRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenRepository extends _i1.Mock implements _i12.TokenRepository {
  MockTokenRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String?> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<void> saveToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #saveToken,
          [token],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [GetActivePlansUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetActivePlansUseCase extends _i1.Mock
    implements _i13.GetActivePlansUseCase {
  MockGetActivePlansUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i11.PlansEntity>> call(
          {required String? authorization}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#authorization: authorization},
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, _i11.PlansEntity>>.value(
                _FakeEither_0<_i6.Failure, _i11.PlansEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {#authorization: authorization},
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i11.PlansEntity>>);
}

/// A class which mocks [GetTokenUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTokenUseCase extends _i1.Mock implements _i14.GetTokenUseCase {
  MockGetTokenUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String?> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);
}

/// A class which mocks [PostAuthUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostAuthUseCase extends _i1.Mock implements _i15.PostAuthUseCase {
  MockPostAuthUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.AuthEntity>> call({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i7.AuthEntity>>.value(
            _FakeEither_0<_i6.Failure, _i7.AuthEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.AuthEntity>>);
}

/// A class which mocks [SaveTokenUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveTokenUseCase extends _i1.Mock implements _i16.SaveTokenUseCase {
  MockSaveTokenUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> call({required String? token}) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#token: token},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [PostLoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostLoginUseCase extends _i1.Mock implements _i17.PostLoginUseCase {
  MockPostLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i9.LoginEntity>> call({
    required String? authorization,
    required String? emailOrPhone,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #authorization: authorization,
            #emailOrPhone: emailOrPhone,
            #password: password,
          },
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i9.LoginEntity>>.value(
            _FakeEither_0<_i6.Failure, _i9.LoginEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #authorization: authorization,
              #emailOrPhone: emailOrPhone,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i9.LoginEntity>>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i18.RemoteDataSource {
  @override
  _i5.Future<_i3.HttpResponse<_i19.AuthModel>> auth(
          _i20.AuthRequestModel? authRequestModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #auth,
          [authRequestModel],
        ),
        returnValue: _i5.Future<_i3.HttpResponse<_i19.AuthModel>>.value(
            _FakeHttpResponse_1<_i19.AuthModel>(
          this,
          Invocation.method(
            #auth,
            [authRequestModel],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.HttpResponse<_i19.AuthModel>>.value(
                _FakeHttpResponse_1<_i19.AuthModel>(
          this,
          Invocation.method(
            #auth,
            [authRequestModel],
          ),
        )),
      ) as _i5.Future<_i3.HttpResponse<_i19.AuthModel>>);

  @override
  _i5.Future<_i3.HttpResponse<_i21.LoginModel>> login(
    String? authorization,
    _i22.LoginRequestModel? loginRequestModel,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            authorization,
            loginRequestModel,
          ],
        ),
        returnValue: _i5.Future<_i3.HttpResponse<_i21.LoginModel>>.value(
            _FakeHttpResponse_1<_i21.LoginModel>(
          this,
          Invocation.method(
            #login,
            [
              authorization,
              loginRequestModel,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.HttpResponse<_i21.LoginModel>>.value(
                _FakeHttpResponse_1<_i21.LoginModel>(
          this,
          Invocation.method(
            #login,
            [
              authorization,
              loginRequestModel,
            ],
          ),
        )),
      ) as _i5.Future<_i3.HttpResponse<_i21.LoginModel>>);

  @override
  _i5.Future<_i3.HttpResponse<_i23.PlansModel>> getActivePlans({
    required String? authorization,
    required String? sort,
    required bool? isActive,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActivePlans,
          [],
          {
            #authorization: authorization,
            #sort: sort,
            #isActive: isActive,
          },
        ),
        returnValue: _i5.Future<_i3.HttpResponse<_i23.PlansModel>>.value(
            _FakeHttpResponse_1<_i23.PlansModel>(
          this,
          Invocation.method(
            #getActivePlans,
            [],
            {
              #authorization: authorization,
              #sort: sort,
              #isActive: isActive,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.HttpResponse<_i23.PlansModel>>.value(
                _FakeHttpResponse_1<_i23.PlansModel>(
          this,
          Invocation.method(
            #getActivePlans,
            [],
            {
              #authorization: authorization,
              #sort: sort,
              #isActive: isActive,
            },
          ),
        )),
      ) as _i5.Future<_i3.HttpResponse<_i23.PlansModel>>);
}
